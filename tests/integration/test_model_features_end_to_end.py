# -*- coding: utf-8 -*-
"""
Integration Testing suite for model/model_features
Run the tests:
Terminal    => pytest --cov=./mlops mlops/tests/ -v
HTML Report => pytest --cov-report html:/belote/mlops/htmlcov --cov=./mlops mlops/tests/ -v
"""
import pandas as pd
import pytest

from mlops.model.model_features import CustomFeaturesBuilder, run_processing_pipeline


@pytest.fixture
def custom_feature_builder():  # pylint: disable=redefined-outer-name, missing-function-docstring
    return CustomFeaturesBuilder


@pytest.fixture
def synthetic_df() -> pd.DataFrame:  # pylint: disable=redefined-outer-name, missing-function-docstring
    return pd.DataFrame(
        {
            "reward": [1, -1, 1, 1, 1, 1],
            "last_bidder": [1, 2, 1, 1, 1, 1],
            "starter": [2, 1, 2, 1, 1, 1],
            "contract": [
                "hearts",
                "spades",
                "diamonds",
                "clubs",
                "sans_atouts",
                "tout_atouts",
            ],
            "p1_face_value": [20, 30, 40, 10, 10, 10],
            "p2_face_value": [20, 30, 40, 10, 10, 10],
        }
    )


@pytest.fixture
def features_df() -> pd.DataFrame:  # pylint: disable=redefined-outer-name, missing-function-docstring
    return pd.DataFrame(
        {
            "has_BR_at_clubs": [1, 2, 3] + [1, 2, 3],
            "has_BR_at_diamonds": [1, 2, 3] + [1, 2, 3],
            "has_BR_at_hearts": [1, 2, 3] + [1, 2, 3],
            "has_BR_at_spades": [1, 2, 3] + [1, 2, 3],
            "has_tierce_at_clubs": [2, 3, 4] + [2, 3, 4],
            "has_tierce_at_diamonds": [2, 3, 4] + [2, 3, 4],
            "has_tierce_at_hearts": [2, 3, 4] + [2, 3, 4],
            "has_tierce_at_spades": [2, 3, 4] + [2, 3, 4],
            "total_BR_points": [4, 8, 12] + [4, 8, 12],
            "total_tierce_points": [8, 12, 16] + [8, 12, 16],
            "total_AnD_points": [12, 20, 28] + [12, 20, 28],
            "reward": [1, -1, 1, 1, 1, 1],
            "last_bidder": [1, 2, 1, 1, 1, 1],
            "starter": [2, 1, 2, 1, 1, 1],
            "contract": [
                "hearts",
                "spades",
                "diamonds",
                "clubs",
                "sans_atouts",
                "tout_atouts",
            ],
            "p1_has_won": [1, 0, 1, 1, 1, 1],
            "p1_face_value": [20, 30, 40, 10, 10, 10],
            "p2_face_value": [20, 30, 40, 10, 10, 10],
            "clubs": [0, 0, 0, 1, 0, 0],
            "diamonds": [0, 0, 1, 0, 0, 0],
            "hearts": [1, 0, 0, 0, 0, 0],
            "spades": [0, 1, 0, 0, 0, 0],
            "sans_atouts": [0, 0, 0, 0, 1, 0],
            "tout_atouts": [0, 0, 0, 0, 0, 1],
        }
    )


def test_custom_feature_builder_works_correctly(  # pylint: disable=redefined-outer-name
    mocker,
):
    """NA"""
    # Instantiate the mocker to ensure the right methods are being called
    mocker_builder = mocker.MagicMock()
    mocker_builder.balanced_resampling.return_value = mocker_builder
    mocker_builder.feature_total_br_points.return_value = mocker_builder
    mocker_builder.feature_total_tierce_points.return_value = mocker_builder
    mocker_builder.feature_total_and_points.return_value = mocker_builder
    mocker_builder.merge_synthetic_and_features.return_value = mocker_builder
    mocker_builder.encode_contract.return_value = mocker_builder
    mocker_builder.categorize_reward.return_value = mocker_builder
    # Launch the processing pipeline
    run_processing_pipeline(mocker_builder)
    # Evaluate the calls and output generated by the mocker
    mocker_builder.balanced_resampling.assert_called_once()
    mocker_builder.feature_total_br_points.assert_called_once()
    mocker_builder.feature_total_tierce_points.assert_called_once()
    mocker_builder.feature_total_and_points.assert_called_once()
    mocker_builder.merge_synthetic_and_features.assert_called_once()
    mocker_builder.encode_contract.assert_called_once()
    mocker_builder.categorize_reward.assert_called_once()


def test_run_process_pipeline_works_correctly(  # pylint: disable=redefined-outer-name
    synthetic_df, features_df
):
    """NA"""
    intermediate_df = features_df.drop(
        [
            "total_BR_points",
            "total_tierce_points",
            "total_AnD_points",
            "reward",
            "last_bidder",
            "starter",
            "p1_has_won",
            "contract",
            "p1_face_value",
            "p2_face_value",
            "clubs",
            "diamonds",
            "hearts",
            "spades",
            "sans_atouts",
            "tout_atouts",
        ],
        axis=1,
    )
    processed_output = run_processing_pipeline(
        CustomFeaturesBuilder(synthetic_df, intermediate_df)
    )
    pd.testing.assert_frame_equal(
        processed_output.reindex(sorted(processed_output.columns), axis=1),
        features_df.reindex(sorted(features_df.columns), axis=1),
        check_dtype=False,
    )
